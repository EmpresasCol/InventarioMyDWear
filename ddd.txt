-- ==================== ESQUEMA MYSQL WORKBENCH ====================
-- Base de datos para el sistema de inventario

-- Crear base de datos
CREATE DATABASE IF NOT EXISTS inventory_db 
CHARACTER SET utf8mb4 
COLLATE utf8mb4_unicode_ci;

USE inventory_db;

-- ==================== TABLA PRODUCTOS ====================
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    type ENUM('conjunto', 'boxer') NOT NULL COMMENT 'Tipo de producto',
    size ENUM('XS', 'S', 'M', 'L', 'XL', 'XXL') NOT NULL COMMENT 'Talla del producto',
    color VARCHAR(50) NOT NULL COMMENT 'Color del producto',
    quantity INT NOT NULL DEFAULT 0 COMMENT 'Cantidad en inventario',
    price DECIMAL(10, 2) DEFAULT 0.00 COMMENT 'Precio unitario',
    
    -- Campos específicos para conjuntos deportivos
    brand VARCHAR(50) NULL COMMENT 'Marca (Nike, Adidas, Under Armour, Puma)',
    
    -- Campos específicos para boxers
    logo_type ENUM('pequeñas', 'grandes') NULL COMMENT 'Tipo de logo para boxers Calvin Klein',
    
    -- Campos de imagen
    image_url VARCHAR(500) NULL COMMENT 'URL de la imagen en Cloudinary',
    image_public_id VARCHAR(200) NULL COMMENT 'ID público de Cloudinary para eliminar',
    
    -- Campos de auditoría
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha de creación',
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Fecha de última actualización',
    
    -- Índices para optimizar consultas
    INDEX idx_type (type),
    INDEX idx_size (size),
    INDEX idx_brand (brand),
    INDEX idx_color (color),
    INDEX idx_quantity (quantity),
    INDEX idx_created_at (created_at),
    
    -- Restricciones
    CONSTRAINT chk_quantity CHECK (quantity >= 0),
    CONSTRAINT chk_price CHECK (price >= 0),
    CONSTRAINT chk_brand_for_conjunto CHECK (
        (type = 'conjunto' AND brand IS NOT NULL) OR 
        (type = 'boxer' AND brand IS NULL)
    ),
    CONSTRAINT chk_logo_for_boxer CHECK (
        (type = 'boxer' AND logo_type IS NOT NULL) OR 
        (type = 'conjunto' AND logo_type IS NULL)
    )
) ENGINE=InnoDB 
DEFAULT CHARSET=utf8mb4 
COLLATE=utf8mb4_unicode_ci
COMMENT='Tabla principal de productos del inventario';

-- ==================== TABLA MOVIMIENTOS DE INVENTARIO ====================
CREATE TABLE inventory_movements (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL COMMENT 'ID del producto relacionado',
    movement_type ENUM('entrada', 'salida', 'ajuste') NOT NULL COMMENT 'Tipo de movimiento',
    quantity INT NOT NULL COMMENT 'Cantidad del movimiento',
    previous_quantity INT NOT NULL COMMENT 'Cantidad anterior',
    new_quantity INT NOT NULL COMMENT 'Nueva cantidad después del movimiento',
    reason VARCHAR(255) NULL COMMENT 'Razón del movimiento',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha del movimiento',
    
    -- Relación con productos
    FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE,
    
    -- Índices
    INDEX idx_product_id (product_id),
    INDEX idx_movement_type (movement_type),
    INDEX idx_created_at (created_at),
    
    -- Restricciones
    CONSTRAINT chk_movement_quantity CHECK (quantity > 0),
    CONSTRAINT chk_previous_quantity CHECK (previous_quantity >= 0),
    CONSTRAINT chk_new_quantity CHECK (new_quantity >= 0)
) ENGINE=InnoDB 
DEFAULT CHARSET=utf8mb4 
COLLATE=utf8mb4_unicode_ci
COMMENT='Historial de movimientos de inventario';

-- ==================== TABLA DE USUARIOS (OPCIONAL) ====================
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL COMMENT 'Nombre de usuario',
    email VARCHAR(100) UNIQUE NOT NULL COMMENT 'Correo electrónico',
    password_hash VARCHAR(255) NOT NULL COMMENT 'Hash de la contraseña',
    role ENUM('admin', 'user') DEFAULT 'user' COMMENT 'Rol del usuario',
    is_active BOOLEAN DEFAULT TRUE COMMENT 'Usuario activo',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_username (username),
    INDEX idx_email (email),
    INDEX idx_role (role)
) ENGINE=InnoDB 
DEFAULT CHARSET=utf8mb4 
COLLATE=utf8mb4_unicode_ci
COMMENT='Usuarios del sistema (opcional)';

-- ==================== VISTAS ÚTILES ====================

-- Vista resumen de productos
CREATE VIEW v_product_summary AS
SELECT 
    p.*,
    CASE 
        WHEN p.type = 'conjunto' THEN CONCAT('Conjunto ', p.brand, ' - ', p.color, ' (', p.size, ')')
        WHEN p.type = 'boxer' THEN CONCAT('Boxer Calvin Klein - ', p.color, ' - ', p.logo_type, ' (', p.size, ')')
    END as product_name,
    (p.price * p.quantity) as total_value,
    CASE 
        WHEN p.quantity = 0 THEN 'Sin Stock'
        WHEN p.quantity < 5 THEN 'Stock Bajo'
        WHEN p.quantity < 10 THEN 'Stock Medio'
        ELSE 'Stock Alto'
    END as stock_status
FROM products p;

-- Vista de estadísticas por marca
CREATE VIEW v_brand_stats AS
SELECT 
    brand,
    COUNT(*) as product_count,
    SUM(quantity) as total_quantity,
    SUM(price * quantity) as total_value,
    AVG(price) as avg_price
FROM products 
WHERE brand IS NOT NULL 
GROUP BY brand;

-- Vista de estadísticas por talla
CREATE VIEW v_size_stats AS
SELECT 
    size,
    COUNT(*) as product_count,
    SUM(quantity) as total_quantity,
    SUM(price * quantity) as total_value
FROM products 
GROUP BY size 
ORDER BY 
    CASE size
        WHEN 'XS' THEN 1
        WHEN 'S' THEN 2
        WHEN 'M' THEN 3
        WHEN 'L' THEN 4
        WHEN 'XL' THEN 5
        WHEN 'XXL' THEN 6
    END;

-- Vista de productos con stock bajo
CREATE VIEW v_low_stock AS
SELECT 
    p.*,
    CASE 
        WHEN p.type = 'conjunto' THEN CONCAT('Conjunto ', p.brand, ' - ', p.color, ' (', p.size, ')')
        WHEN p.type = 'boxer' THEN CONCAT('Boxer Calvin Klein - ', p.color, ' - ', p.logo_type, ' (', p.size, ')')
    END as product_name
FROM products p
WHERE p.quantity < 5
ORDER BY p.quantity ASC;

-- ==================== PROCEDIMIENTOS ALMACENADOS ====================

-- Procedimiento para agregar stock
DELIMITER //
CREATE PROCEDURE AddStock(
    IN p_product_id INT,
    IN p_quantity INT,
    IN p_reason VARCHAR(255)
)
BEGIN
    DECLARE v_current_quantity INT;
    DECLARE v_new_quantity INT;
    
    -- Obtener cantidad actual
    SELECT quantity INTO v_current_quantity 
    FROM products 
    WHERE id = p_product_id;
    
    -- Calcular nueva cantidad
    SET v_new_quantity = v_current_quantity + p_quantity;
    
    -- Actualizar producto
    UPDATE products 
    SET quantity = v_new_quantity,
        updated_at = CURRENT_TIMESTAMP
    WHERE id = p_product_id;
    
    -- Registrar movimiento
    INSERT INTO inventory_movements (
        product_id, movement_type, quantity, previous_quantity, new_quantity, reason
    ) VALUES (
        p_product_id, 'entrada', p_quantity, v_current_quantity, v_new_quantity, p_reason
    );
END//
DELIMITER ;

-- Procedimiento para reducir stock
DELIMITER //
CREATE PROCEDURE ReduceStock(
    IN p_product_id INT,
    IN p_quantity INT,
    IN p_reason VARCHAR(255)
)
BEGIN
    DECLARE v_current_quantity INT;
    DECLARE v_new_quantity INT;
    
    -- Obtener cantidad actual
    SELECT quantity INTO v_current_quantity 
    FROM products 
    WHERE id = p_product_id;
    
    -- Verificar que hay suficiente stock
    IF v_current_quantity < p_quantity THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Stock insuficiente';
    END IF;
    
    -- Calcular nueva cantidad
    SET v_new_quantity = v_current_quantity - p_quantity;
    
    -- Actualizar producto
    UPDATE products 
    SET quantity = v_new_quantity,
        updated_at = CURRENT_TIMESTAMP
    WHERE id = p_product_id;
    
    -- Registrar movimiento
    INSERT INTO inventory_movements (
        product_id, movement_type, quantity, previous_quantity, new_quantity, reason
    ) VALUES (
        p_product_id, 'salida', p_quantity, v_current_quantity, v_new_quantity, p_reason
    );
END//
DELIMITER ;

-- ==================== TRIGGERS ====================

-- Trigger para validar datos antes de insertar
DELIMITER //
CREATE TRIGGER tr_products_before_insert
BEFORE INSERT ON products
FOR EACH ROW
BEGIN
    -- Validar que conjuntos tengan marca
    IF NEW.type = 'conjunto' AND NEW.brand IS NULL THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Los conjuntos deportivos deben tener una marca';
    END IF;
    
    -- Validar que boxers tengan tipo de logo
    IF NEW.type = 'boxer' AND NEW.logo_type IS NULL THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Los boxers deben tener un tipo de logo';
    END IF;
    
    -- Limpiar campos no necesarios
    IF NEW.type = 'conjunto' THEN
        SET NEW.logo_type = NULL;
    ELSEIF NEW.type = 'boxer' THEN
        SET NEW.brand = NULL;
    END IF;
END//
DELIMITER ;

-- Trigger para validar datos antes de actualizar
DELIMITER //
CREATE TRIGGER tr_products_before_update
BEFORE UPDATE ON products
FOR EACH ROW
BEGIN
    -- Validar que conjuntos tengan marca
    IF NEW.type = 'conjunto' AND NEW.brand IS NULL THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Los conjuntos deportivos deben tener una marca';
    END IF;
    
    -- Validar que boxers tengan tipo de logo
    IF NEW.type = 'boxer' AND NEW.logo_type IS NULL THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Los boxers deben tener un tipo de logo';
    END IF;
    
    -- Limpiar campos no necesarios
    IF NEW.type = 'conjunto' THEN
        SET NEW.logo_type = NULL;
    ELSEIF NEW.type = 'boxer' THEN
        SET NEW.brand = NULL;
    END IF;
END//
DELIMITER ;

-- ==================== DATOS DE EJEMPLO ====================

-- Insertar algunos productos de ejemplo
INSERT INTO products (type, size, color, quantity, price, brand) VALUES
('conjunto', 'M', 'Negro', 15, 45.99, 'Nike'),
('conjunto', 'L', 'Azul', 10, 52.99, 'Adidas'),
('conjunto', 'XL', 'Gris', 8, 38.99, 'Under Armour'),
('conjunto', 'S', 'Rojo', 12, 41.99, 'Puma'),
('boxer', 'M', 'Negro', 25, 18.99, NULL, 'pequeñas'),
('boxer', 'L', 'Blanco', 20, 18.99, NULL, 'grandes'),
('boxer', 'XL', 'Azul', 15, 18.99, NULL, 'pequeñas'),
('boxer', 'S', 'Gris', 18, 18.99, NULL, 'grandes');

-- ==================== CONSULTAS ÚTILES ====================

-- 1. Obtener resumen completo del inventario
SELECT 
    type as 'Tipo',
    COUNT(*) as 'Productos Únicos',
    SUM(quantity) as 'Cantidad Total',
    CONCAT(', FORMAT(SUM(price * quantity), 2)) as 'Valor Total'
FROM products 
GROUP BY type;

-- 2. Productos con stock bajo (menos de 10 unidades)
SELECT 
    CASE 
        WHEN type = 'conjunto' THEN CONCAT('Conjunto ', brand, ' - ', color, ' (', size, ')')
        WHEN type = 'boxer' THEN CONCAT('Boxer Calvin Klein - ', color, ' - ', logo_type, ' (', size, ')')
    END as 'Producto',
    quantity as 'Stock Actual',
    CASE 
        WHEN quantity = 0 THEN 'SIN STOCK'
        WHEN quantity < 5 THEN 'CRÍTICO'
        ELSE 'BAJO'
    END as 'Estado'
FROM products 
WHERE quantity < 10
ORDER BY quantity ASC;

-- 3. Productos más vendidos (basado en movimientos de salida)
SELECT 
    p.id,
    CASE 
        WHEN p.type = 'conjunto' THEN CONCAT('Conjunto ', p.brand, ' - ', p.color, ' (', p.size, ')')
        WHEN p.type = 'boxer' THEN CONCAT('Boxer Calvin Klein - ', p.color, ' - ', p.logo_type, ' (', p.size, ')')
    END as 'Producto',
    COALESCE(SUM(CASE WHEN m.movement_type = 'salida' THEN m.quantity ELSE 0 END), 0) as 'Total Vendido'
FROM products p
LEFT JOIN inventory_movements m ON p.id = m.product_id
GROUP BY p.id
ORDER BY `Total Vendido` DESC
LIMIT 10;

-- 4. Resumen por marcas (solo conjuntos)
SELECT 
    brand as 'Marca',
    COUNT(*) as 'Modelos',
    SUM(quantity) as 'Stock Total',
    CONCAT(', FORMAT(AVG(price), 2)) as 'Precio Promedio',
    CONCAT(', FORMAT(SUM(price * quantity), 2)) as 'Valor Total'
FROM products 
WHERE type = 'conjunto'
GROUP BY brand
ORDER BY SUM(quantity) DESC;

-- 5. Distribución por tallas
SELECT 
    size as 'Talla',
    COUNT(*) as 'Productos',
    SUM(quantity) as 'Stock Total',
    ROUND((SUM(quantity) * 100.0 / (SELECT SUM(quantity) FROM products)), 2) as 'Porcentaje %'
FROM products 
GROUP BY size
ORDER BY 
    CASE size
        WHEN 'XS' THEN 1
        WHEN 'S' THEN 2
        WHEN 'M' THEN 3
        WHEN 'L' THEN 4
        WHEN 'XL' THEN 5
        WHEN 'XXL' THEN 6
    END;

-- 6. Historial de movimientos recientes
SELECT 
    DATE_FORMAT(m.created_at, '%d/%m/%Y %H:%i') as 'Fecha',
    CASE 
        WHEN p.type = 'conjunto' THEN CONCAT('Conjunto ', p.brand, ' - ', p.color, ' (', p.size, ')')
        WHEN p.type = 'boxer' THEN CONCAT('Boxer Calvin Klein - ', p.color, ' - ', p.logo_type, ' (', p.size, ')')
    END as 'Producto',
    CASE 
        WHEN m.movement_type = 'entrada' THEN CONCAT('+', m.quantity)
        WHEN m.movement_type = 'salida' THEN CONCAT('-', m.quantity)
        ELSE CONCAT('±', m.quantity)
    END as 'Movimiento',
    m.movement_type as 'Tipo',
    m.reason as 'Razón'
FROM inventory_movements m
JOIN products p ON m.product_id = p.id
ORDER BY m.created_at DESC
LIMIT 20;

-- ==================== ÍNDICES ADICIONALES PARA OPTIMIZACIÓN ====================

-- Índice compuesto para búsquedas complejas
CREATE INDEX idx_type_brand_size ON products(type, brand, size);
CREATE INDEX idx_type_color_size ON products(type, color, size);

-- Índice para consultas de fecha en movimientos
CREATE INDEX idx_movements_date_type ON inventory_movements(created_at, movement_type);

-- ==================== FUNCIÓN PARA BACKUP AUTOMÁTICO ====================

-- Crear usuario específico para backups (ejecutar como root)
-- CREATE USER 'backup_user'@'localhost' IDENTIFIED BY 'secure_password_here';
-- GRANT SELECT, LOCK TABLES ON inventory_db.* TO 'backup_user'@'localhost';
-- FLUSH PRIVILEGES;

-- Script para backup (ejecutar desde terminal):
-- mysqldump -u backup_user -p inventory_db > inventory_backup_$(date +%Y%m%d_%H%M%S).sql

-- ==================== CONFIGURACIÓN DE SEGURIDAD ====================

-- Crear usuario de aplicación con permisos limitados
-- CREATE USER 'inventory_app'@'%' IDENTIFIED BY 'secure_app_password';
-- GRANT SELECT, INSERT, UPDATE, DELETE ON inventory_db.products TO 'inventory_app'@'%';
-- GRANT SELECT, INSERT ON inventory_db.inventory_movements TO 'inventory_app'@'%';
-- GRANT SELECT ON inventory_db.v_* TO 'inventory_app'@'%';
-- GRANT EXECUTE ON PROCEDURE inventory_db.AddStock TO 'inventory_app'@'%';
-- GRANT EXECUTE ON PROCEDURE inventory_db.ReduceStock TO 'inventory_app'@'%';
-- FLUSH PRIVILEGES;